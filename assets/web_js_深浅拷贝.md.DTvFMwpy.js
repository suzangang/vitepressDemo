import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.piREQT2Z.js";const g=JSON.parse('{"title":"深浅拷贝","description":"","frontmatter":{},"headers":[],"relativePath":"web/js/深浅拷贝.md","filePath":"web/js/深浅拷贝.md","lastUpdated":null}'),l={name:"web/js/深浅拷贝.md"},h=n(`<h1 id="深浅拷贝" tabindex="-1">深浅拷贝 <a class="header-anchor" href="#深浅拷贝" aria-label="Permalink to &quot;深浅拷贝&quot;">​</a></h1><h2 id="浅拷贝" tabindex="-1">浅拷贝 <a class="header-anchor" href="#浅拷贝" aria-label="Permalink to &quot;浅拷贝&quot;">​</a></h2><h3 id="浅拷贝只复制对象或数组的引用-而不复制其内部的元素或对象。" tabindex="-1">浅拷贝只复制对象或数组的引用，而不复制其内部的元素或对象。 <a class="header-anchor" href="#浅拷贝只复制对象或数组的引用-而不复制其内部的元素或对象。" aria-label="Permalink to &quot;浅拷贝只复制对象或数组的引用，而不复制其内部的元素或对象。&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浅拷贝示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shallowCopy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalArray; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里只是复制了数组的引用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shallowCopy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改拷贝后的数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(originalArray); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3, 4]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shallowCopy); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3, 4]</span></span></code></pre></div><h5 id="在上面的示例中-修改了shallowcopy数组-原始数组originalarray也发生了变化-这是因为shallowcopy只是复制了originalarray的引用-两者指向同一块内存。" tabindex="-1">在上面的示例中，修改了shallowCopy数组，原始数组originalArray也发生了变化，这是因为shallowCopy只是复制了originalArray的引用，两者指向同一块内存。 <a class="header-anchor" href="#在上面的示例中-修改了shallowcopy数组-原始数组originalarray也发生了变化-这是因为shallowcopy只是复制了originalarray的引用-两者指向同一块内存。" aria-label="Permalink to &quot;在上面的示例中，修改了shallowCopy数组，原始数组originalArray也发生了变化，这是因为shallowCopy只是复制了originalArray的引用，两者指向同一块内存。&quot;">​</a></h5><h2 id="深拷贝" tabindex="-1">深拷贝 <a class="header-anchor" href="#深拷贝" aria-label="Permalink to &quot;深拷贝&quot;">​</a></h2><h3 id="深拷贝是完全复制原始对象或数组的所有元素-包括内部的对象或数组。" tabindex="-1">深拷贝是完全复制原始对象或数组的所有元素，包括内部的对象或数组。 <a class="header-anchor" href="#深拷贝是完全复制原始对象或数组的所有元素-包括内部的对象或数组。" aria-label="Permalink to &quot;深拷贝是完全复制原始对象或数组的所有元素，包括内部的对象或数组。&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 深拷贝示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deepCopy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(originalArray)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用JSON解析和序列化进行深拷贝</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">deepCopy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改拷贝后的数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(originalArray); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deepCopy); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3, 4]</span></span></code></pre></div><h5 id="在这个示例中-使用json-parse-和json-stringify-对originalarray进行深拷贝-deepcopy数组的修改不会影响到originalarray。" tabindex="-1">在这个示例中，使用JSON.parse()和JSON.stringify()对originalArray进行深拷贝，deepCopy数组的修改不会影响到originalArray。 <a class="header-anchor" href="#在这个示例中-使用json-parse-和json-stringify-对originalarray进行深拷贝-deepcopy数组的修改不会影响到originalarray。" aria-label="Permalink to &quot;在这个示例中，使用JSON.parse()和JSON.stringify()对originalArray进行深拷贝，deepCopy数组的修改不会影响到originalArray。&quot;">​</a></h5>`,9),t=[h];function p(k,e,r,o,d,E){return a(),i("div",null,t)}const c=s(l,[["render",p]]);export{g as __pageData,c as default};
